<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>ReceiptRadar - Smart Receipt Tracking</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script>
      tailwind.config = {
        theme: {
          extend: {
            colors: {
              primary: "#4F46E5",
              secondary: "#10B981",
            },
            borderRadius: {
              none: "0px",
              sm: "4px",
              DEFAULT: "8px",
              md: "12px",
              lg: "16px",
              xl: "20px",
              "2xl": "24px",
              "3xl": "32px",
              full: "9999px",
              button: "8px",
            },
          },
        },
      };
    </script>
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Pacifico&display=swap"
      rel="stylesheet"
    />
    <link
      href="https://cdn.jsdelivr.net/npm/remixicon@4.5.0/fonts/remixicon.css"
      rel="stylesheet"
    />
    <script src="https://cdnjs.cloudflare.com/ajax/libs/echarts/5.5.0/echarts.min.js"></script>
    <style>
      :where([class^="ri-"])::before { content: "\f3c2"; }
      input[type="number"]::-webkit-inner-spin-button,
      input[type="number"]::-webkit-outer-spin-button {
      -webkit-appearance: none;
      margin: 0;
      }
    </style>
  </head>
  <body class="bg-gray-50 min-h-screen">
    <nav class="bg-white shadow-sm">
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="flex justify-between h-16">
          <div class="flex items-center">
            <span class="text-2xl font-['Pacifico'] text-primary tracking-wide"
              >ReceiptRadar</span
            >
          </div>
          <div class="flex items-center space-x-4">
            <button
              class="text-gray-600 hover:text-primary cursor-pointer flex items-center space-x-1"
            >
              <div class="w-5 h-5 flex items-center justify-center">
                <i class="ri-dashboard-line"></i>
              </div>
              <span>Dashboard</span>
            </button>
            <button
              onclick="document.getElementById('settingsModal').classList.remove('hidden')"
              class="text-gray-600 hover:text-primary cursor-pointer flex items-center space-x-1"
            >
              <div class="w-5 h-5 flex items-center justify-center">
                <i class="ri-settings-line"></i>
              </div>
              <span>Settings</span>
            </button>
            <div
              id="settingsModal"
              class="hidden fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50"
            >
              <div class="bg-white rounded-lg p-6 max-w-md w-full mx-4">
                <div class="flex justify-between items-center mb-4">
                  <h3 class="text-lg font-medium text-gray-900">Settings</h3>
                  <button
                    onclick="document.getElementById('settingsModal').classList.add('hidden')"
                    class="text-gray-400 hover:text-gray-600"
                  >
                    <div class="w-6 h-6 flex items-center justify-center">
                      <i class="ri-close-line"></i>
                    </div>
                  </button>
                </div>
                <div class="space-y-6">
                  <div>
                    <h4 class="text-base font-medium text-gray-900 mb-3">
                      Cosmetics
                    </h4>
                    <div class="space-y-3">
                      <div>
                        <label
                          class="block text-sm font-medium text-gray-700 mb-1"
                          >Theme</label
                        >
                        <select
                          id="theme"
                          class="w-full px-4 py-2 border rounded-lg focus:ring-2 focus:ring-primary focus:border-transparent"
                        >
                          <option value="default">Default Theme</option>
                          <option value="dark">Dark Theme</option>
                          <option value="light">Light Theme</option>
                        </select>
                      </div>
                    </div>
                  </div>
                  <div>
                    <h4 class="text-base font-medium text-gray-900 mb-3">
                      Profile
                    </h4>
                    <div class="space-y-3">
                      <div>
                        <label
                          class="block text-sm font-medium text-gray-700 mb-1"
                          >Time Zone</label
                        >
                        <select
                          id="timeZone"
                          class="w-full px-4 py-2 border rounded-lg focus:ring-2 focus:ring-primary focus:border-transparent"
                        >
                          <option value="UTC-12:00">
                            (GMT-12:00) International Date Line West
                          </option>
                          <option value="UTC-11:00">
                            (GMT-11:00) Midway Island, Samoa
                          </option>
                          <option value="UTC-10:00">(GMT-10:00) Hawaii</option>
                          <option value="UTC-09:00">(GMT-09:00) Alaska</option>
                          <option value="UTC-08:00">
                            (GMT-08:00) Pacific Time (US & Canada)
                          </option>
                          <option value="UTC-07:00">
                            (GMT-07:00) Mountain Time (US & Canada)
                          </option>
                          <option value="UTC-06:00">
                            (GMT-06:00) Central Time (US & Canada)
                          </option>
                          <option value="UTC-05:00" selected>
                            (GMT-05:00) Eastern Time (US & Canada)
                          </option>
                          <option value="UTC-04:00">
                            (GMT-04:00) Atlantic Time (Canada)
                          </option>
                          <option value="UTC-03:00">
                            (GMT-03:00) Brasilia, Buenos Aires
                          </option>
                          <option value="UTC-02:00">
                            (GMT-02:00) Mid-Atlantic
                          </option>
                          <option value="UTC-01:00">
                            (GMT-01:00) Azores, Cape Verde Is.
                          </option>
                          <option value="UTC+00:00">
                            (GMT) London, Dublin, Edinburgh
                          </option>
                          <option value="UTC+01:00">
                            (GMT+01:00) Paris, Berlin, Rome, Madrid
                          </option>
                          <option value="UTC+02:00">
                            (GMT+02:00) Athens, Istanbul, Cairo
                          </option>
                          <option value="UTC+03:00">
                            (GMT+03:00) Moscow, Baghdad
                          </option>
                          <option value="UTC+04:00">
                            (GMT+04:00) Abu Dhabi, Dubai
                          </option>
                          <option value="UTC+05:00">
                            (GMT+05:00) Islamabad, Karachi
                          </option>
                          <option value="UTC+06:00">(GMT+06:00) Dhaka</option>
                          <option value="UTC+07:00">
                            (GMT+07:00) Bangkok, Jakarta
                          </option>
                          <option value="UTC+08:00">
                            (GMT+08:00) Beijing, Hong Kong
                          </option>
                          <option value="UTC+09:00">
                            (GMT+09:00) Tokyo, Seoul
                          </option>
                          <option value="UTC+10:00">
                            (GMT+10:00) Sydney, Melbourne
                          </option>
                          <option value="UTC+11:00">
                            (GMT+11:00) Solomon Is.
                          </option>
                          <option value="UTC+12:00">
                            (GMT+12:00) Auckland, Wellington
                          </option>
                        </select>
                      </div>
                    </div>
                  </div>
                  <button
                    onclick="saveSettings()"
                    class="w-full bg-primary text-white py-2 px-4 rounded-lg hover:bg-primary/90 transition-colors !rounded-button"
                  >
                    Save Changes
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </nav>
    <main class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
      <div class="mb-8">
        <div class="bg-white rounded-lg shadow-sm p-6">
          <div class="flex space-x-4 mb-6">
            <button
              id="manualTab"
              class="flex-1 py-2 px-4 rounded-full bg-primary text-white text-center cursor-pointer whitespace-nowrap !rounded-button"
            >
              Manual Entry
            </button>
            <button
              id="scanTab"
              class="flex-1 py-2 px-4 rounded-full bg-gray-100 text-gray-600 text-center cursor-pointer whitespace-nowrap !rounded-button"
            >
              Scan Receipt
            </button>
          </div>
          <div id="manualEntry" class="space-y-4">
            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label class="block text-sm font-medium text-gray-700 mb-1"
                  >Item Name</label
                >
                <input
                  type="text"
                  id="itemName"
                  class="w-full px-4 py-2 border rounded-lg focus:ring-2 focus:ring-primary focus:border-transparent"
                  placeholder="Enter item name"
                />
              </div>
              <div>
                <label class="block text-sm font-medium text-gray-700 mb-1"
                  >Store Name</label
                >
                <input
                  type="text"
                  id="storeName"
                  class="w-full px-4 py-2 border rounded-lg focus:ring-2 focus:ring-primary focus:border-transparent"
                  placeholder="Enter store name"
                />
              </div>
              <div>
                <label class="block text-sm font-medium text-gray-700 mb-1"
                  >Amount</label
                >
                <div class="relative">
                  <span
                    class="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-500"
                    >$</span
                  >
                  <input
                    type="number"
                    id="amount"
                    class="w-full pl-8 pr-4 py-2 border rounded-lg focus:ring-2 focus:ring-primary focus:border-transparent"
                    placeholder="0.00"
                  />
                </div>
              </div>
              <div>
                <label class="block text-sm font-medium text-gray-700 mb-1"
                  >Category</label
                >
                <div class="relative">
                  <select
                    id="category"
                    class="w-full px-4 py-2 border rounded-lg focus:ring-2 focus:ring-primary focus:border-transparent appearance-none pr-10"
                  >
                    <option value="groceries">Groceries</option>
                    <option value="shopping">Shopping</option>
                    <option value="dining">Dining</option>
                    <option value="utilities">Utilities</option>
                    <option value="comfort">Comfort Purchases</option>
                    <option value="others">Others</option>
                  </select>
                  <div
                    class="absolute right-3 top-1/2 transform -translate-y-1/2 w-4 h-4 flex items-center justify-center pointer-events-none"
                  >
                    <i class="ri-arrow-down-s-line"></i>
                  </div>
                </div>
              </div>
            </div>
            <button
              id="addPurchase"
              class="w-full bg-primary text-white py-2 px-4 rounded-lg hover:bg-primary/90 transition-colors whitespace-nowrap !rounded-button"
            >
              Add Purchase
            </button>
          </div>
          <div id="scanReceipt" class="hidden">
            <div
              class="border-2 border-dashed border-gray-300 rounded-lg p-6 text-center"
            >
              <div
                class="w-12 h-12 mx-auto mb-4 flex items-center justify-center"
              >
                <i class="ri-camera-line text-4xl text-gray-400"></i>
              </div>
              <p class="text-gray-600 mb-4">
                Drag and drop your receipt here or click to upload
              </p>
              <input
                type="file"
                id="receiptUpload"
                class="hidden"
                accept="image/*"
              />
              <button
                onclick="document.getElementById('receiptUpload').click()"
                class="bg-primary text-white py-2 px-4 rounded-lg hover:bg-primary/90 transition-colors !rounded-button"
              >
                Upload Receipt
              </button>
            </div>
          </div>
        </div>
      </div>
      <div class="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
        <div class="bg-white rounded-lg shadow-sm p-6">
          <h3 class="text-lg font-medium text-gray-900 mb-4">Total Spending</h3>
          <p id="totalSpending" class="text-3xl font-bold text-primary">
            No purchases yet
          </p>
          <p class="text-sm text-gray-500">This month</p>
        </div>
        <div class="bg-white rounded-lg shadow-sm p-6">
          <h3 class="text-lg font-medium text-gray-900 mb-4">
            Average per Purchase
          </h3>
          <p id="averagePurchase" class="text-3xl font-bold text-secondary">
            No purchases yet
          </p>
          <p id="purchaseCount" class="text-sm text-gray-500">
            Based on 0 purchases
          </p>
        </div>
        <div class="bg-white rounded-lg shadow-sm p-6">
          <h3 class="text-lg font-medium text-gray-900 mb-4">
            Most Frequent Store
          </h3>
          <p id="frequentStore" class="text-3xl font-bold text-primary">
            No purchases yet
          </p>
          <p id="storeVisits" class="text-sm text-gray-500">
            0 visits this month
          </p>
        </div>
      </div>
      <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-8">
        <div class="bg-white rounded-lg shadow-sm p-6">
          <h3 class="text-lg font-medium text-gray-900 mb-4">
            Monthly Spending
          </h3>
          <div id="monthlyChart" style="height: 300px;"></div>
        </div>
        <div class="bg-white rounded-lg shadow-sm p-6">
          <h3 class="text-lg font-medium text-gray-900 mb-4">
            Spending by Category
          </h3>
          <div id="categoryChart" style="height: 300px;"></div>
        </div>
      </div>
      <div class="bg-white rounded-lg shadow-sm overflow-hidden">
        <div class="p-6 border-b border-gray-200">
          <h2 class="text-lg font-medium text-gray-900">Recent Purchases</h2>
        </div>
        <div class="overflow-x-auto">
          <table class="min-w-full divide-y divide-gray-200">
            <thead class="bg-gray-50">
              <tr>
                <th
                  class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                >
                  Date
                </th>
                <th
                  class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                >
                  Store
                </th>
                <th
                  class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                >
                  Item
                </th>
                <th
                  class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                >
                  Category
                </th>
                <th
                  class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                >
                  Amount
                </th>
                <th
                  class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                >
                  Action
                </th>
              </tr>
            </thead>
            <tbody
              class="bg-white divide-y divide-gray-200"
              id="purchaseTableBody"
            ></tbody>
          </table>
        </div>
      </div>
    </main>
    <div
      id="toast"
      class="fixed bottom-4 right-4 bg-green-500 text-white px-6 py-3 rounded-lg transform translate-y-full opacity-0 transition-all duration-300 hidden"
    >
      Purchase added successfully!
    </div>
    <script>
      const mockPurchases = [];
      function showToast(message) {
        const toast = document.getElementById("toast");
        toast.textContent = message;
        toast.classList.remove("hidden");
        setTimeout(() => {
          toast.classList.remove("translate-y-full", "opacity-0");
        }, 100);
        setTimeout(() => {
          toast.classList.add("translate-y-full", "opacity-0");
          setTimeout(() => {
            toast.classList.add("hidden");
          }, 300);
        }, 3000);
      }
      function saveSettings() {
        const theme = document.getElementById("theme").value;
        const timeZone = document.getElementById("timeZone").value;
        applyTheme(theme);
        localStorage.setItem(
          "settings",
          JSON.stringify({
            theme,
            timeZone,
          }),
        );
        showToast("Settings saved successfully!");
        document.getElementById("settingsModal").classList.add("hidden");
        updateTable();
      }
      function applyTheme(themeName) {
        const elements = document.querySelectorAll("*");
        if (themeName === "dark") {
          elements.forEach((el) => {
            if (el.classList.contains("bg-gray-50")) {
              el.classList.remove("bg-gray-50");
              el.classList.add("bg-gray-900");
            }
            if (el.classList.contains("bg-white")) {
              el.classList.remove("bg-white");
              el.classList.add("bg-gray-800");
            }
            if (el.classList.contains("text-gray-900")) {
              el.classList.remove("text-gray-900");
              el.classList.add("text-white");
            }
            if (
              el.classList.contains("text-gray-600") ||
              el.classList.contains("text-gray-500")
            ) {
              el.classList.remove("text-gray-600", "text-gray-500");
              el.classList.add("text-gray-400");
            }
            if (el.classList.contains("border-gray-200")) {
              el.classList.remove("border-gray-200");
              el.classList.add("border-gray-700");
            }
            if (el.classList.contains("bg-gray-50")) {
              el.classList.remove("bg-gray-50");
              el.classList.add("bg-gray-800");
            }
          });
        } else {
          elements.forEach((el) => {
            if (el.classList.contains("bg-gray-900")) {
              el.classList.remove("bg-gray-900");
              el.classList.add("bg-gray-50");
            }
            if (el.classList.contains("bg-gray-800")) {
              el.classList.remove("bg-gray-800");
              el.classList.add("bg-white");
            }
            if (el.classList.contains("text-white")) {
              el.classList.remove("text-white");
              el.classList.add("text-gray-900");
            }
            if (el.classList.contains("text-gray-400")) {
              el.classList.remove("text-gray-400");
              el.classList.add("text-gray-600");
            }
            if (el.classList.contains("border-gray-700")) {
              el.classList.remove("border-gray-700");
              el.classList.add("border-gray-200");
            }
          });
        }

        if (monthlyChart && categoryChart) {
          monthlyChart.dispose();
          categoryChart.dispose();
          monthlyChart = echarts.init(document.getElementById("monthlyChart"));
          categoryChart = echarts.init(document.getElementById("categoryChart"));
          monthlyChart.setOption(monthlyOption);
          categoryChart.setOption(categoryOption);
          updateCharts();
        }
      }
      function loadSettings() {
        const settings = JSON.parse(localStorage.getItem("settings") || "{}");
        if (settings.theme) {
          document.getElementById("theme").value = settings.theme;
          applyTheme(settings.theme);
        }
        if (settings.timeZone) {
          document.getElementById("timeZone").value = settings.timeZone;
        }
      }
      function formatDate(date, timeZone) {
        try {
          const tzString = timeZone.replace("UTC", "Etc/GMT");
          const offset = parseInt(tzString.split("GMT")[1]);
          const dateObj = new Date(date);
          dateObj.setHours(dateObj.getHours() + offset);
          return dateObj.toLocaleDateString("en-US", {
            year: "numeric",
            month: "2-digit",
            day: "2-digit",
          });
        } catch (e) {
          return new Date(date).toLocaleDateString("en-US", {
            year: "numeric",
            month: "2-digit",
            day: "2-digit",
          });
        }
      }
      function updateTable() {
        const settings = JSON.parse(localStorage.getItem("settings") || "{}");
        const timeZone = settings.timeZone || "UTC-05:00";
        const tableBody = document.getElementById("purchaseTableBody");
        tableBody.innerHTML = "";
        mockPurchases.forEach((purchase) => {
          const formattedDate = formatDate(purchase.date, timeZone);
          const row = document.createElement("tr");
          row.innerHTML = `
      <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">${formattedDate}</td>
      <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">${purchase.store}</td>
      <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">${purchase.item}</td>
      <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">${purchase.category}</td>
      <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">$${purchase.amount.toFixed(2)}</td>
      <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
      <button class="text-gray-400 hover:text-red-500 transition-colors w-8 h-8 flex items-center justify-center" onclick="deletePurchase(${mockPurchases.indexOf(purchase)})">
      <i class="ri-delete-bin-line"></i>
      </button>
      </td>
      `;
          tableBody.appendChild(row);
        });
      }
      function updateDashboard() {
        if (mockPurchases.length === 0) {
          document.getElementById("totalSpending").textContent = "No purchases yet";
          document.getElementById("averagePurchase").textContent = "No purchases yet";
          document.getElementById("frequentStore").textContent = "No purchases yet";
          document.getElementById("purchaseCount").textContent =
            "Based on 0 purchases";
          document.getElementById("storeVisits").textContent = "0 visits this month";
          return;
        }
        const now = new Date();
        const currentMonth = now.getMonth();
        const currentYear = now.getFullYear();
        const thisMonthPurchases = mockPurchases.filter((purchase) => {
          const purchaseDate = new Date(purchase.date);
          return (
            purchaseDate.getMonth() === currentMonth &&
            purchaseDate.getFullYear() === currentYear
          );
        });
        const totalSpending = thisMonthPurchases.reduce(
          (sum, purchase) => sum + purchase.amount,
          0,
        );
        const averageSpending = totalSpending / thisMonthPurchases.length;
        const storeFrequency = {};
        thisMonthPurchases.forEach((purchase) => {
          storeFrequency[purchase.store] = (storeFrequency[purchase.store] || 0) + 1;
        });
        const storeFrequencyArray = Object.entries(storeFrequency);
        const maxVisits = Math.max(...storeFrequencyArray.map(([_, count]) => count));
        const mostFrequentStores = storeFrequencyArray.filter(
          ([_, count]) => count === maxVisits,
        );
        let frequentStoreText = "NA";
        let visitsText = "0 visits this month";
        if (mostFrequentStores.length === 1) {
          frequentStoreText = mostFrequentStores[0][0];
          visitsText = `${mostFrequentStores[0][1]} visits this month`;
        } else if (mostFrequentStores.length === 2) {
          frequentStoreText = `${mostFrequentStores[0][0]} & ${mostFrequentStores[1][0]}`;
          visitsText = `${mostFrequentStores[0][1]} visits each this month`;
        }
        document.getElementById("totalSpending").textContent =
          `$${totalSpending.toFixed(2)}`;
        document.getElementById("averagePurchase").textContent =
          `$${averageSpending.toFixed(2)}`;
        document.getElementById("purchaseCount").textContent =
          `Based on ${thisMonthPurchases.length} purchases`;
        document.getElementById("frequentStore").textContent = frequentStoreText;
        document.getElementById("storeVisits").textContent = visitsText;
        updateCharts();
      }
      function updateCharts() {
        const monthNames = [
          "Jan",
          "Feb",
          "Mar",
          "Apr",
          "May",
          "Jun",
          "Jul",
          "Aug",
          "Sep",
          "Oct",
          "Nov",
          "Dec",
        ];
        const monthlyData = new Array(6).fill(0);
        const categoryData = {};
        const currentDate = new Date();
        const monthsToShow = 6;
        mockPurchases.forEach((purchase) => {
          const purchaseDate = new Date(purchase.date);
          const monthDiff =
            (currentDate.getFullYear() - purchaseDate.getFullYear()) * 12 +
            (currentDate.getMonth() - purchaseDate.getMonth());
          if (monthDiff < monthsToShow) {
            monthlyData[monthsToShow - monthDiff - 1] += purchase.amount;
          }
          if (purchase.category) {
            categoryData[purchase.category] =
              (categoryData[purchase.category] || 0) + purchase.amount;
          }
        });
        const currentMonth = currentDate.getMonth();
        const labels = [];
        for (let i = 5; i >= 0; i--) {
          const monthIndex = (currentMonth - i + 12) % 12;
          labels.push(monthNames[monthIndex]);
        }
        monthlyChart.setOption({
          xAxis: { data: labels },
          series: [
            {
              data: monthlyData,
              type: "line",
              smooth: true,
              areaStyle: {
                color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [
                  {
                    offset: 0,
                    color: "rgba(87, 181, 231, 0.1)",
                  },
                  {
                    offset: 1,
                    color: "rgba(87, 181, 231, 0)",
                  },
                ]),
              },
              lineStyle: { color: "rgba(87, 181, 231, 1)" },
              itemStyle: { color: "rgba(87, 181, 231, 1)" },
              symbol: "none",
            },
          ],
        });
        const categoryChartData = Object.entries(categoryData).map(
          ([name, value]) => ({ name, value }),
        );
        categoryChart.setOption({
          series: [
            {
              data: categoryChartData,
              type: "pie",
              radius: "70%",
              itemStyle: { borderRadius: 8 },
              color: [
                "rgba(87, 181, 231, 1)",
                "rgba(141, 211, 199, 1)",
                "rgba(251, 191, 114, 1)",
                "rgba(252, 141, 98, 1)",
                "rgba(141, 160, 203, 1)",
              ],
            },
          ],
        });
      }
      function updateTable() {
        const tableBody = document.getElementById("purchaseTableBody");
        tableBody.innerHTML = "";
        mockPurchases.forEach((purchase) => {
          const row = document.createElement("tr");
          row.innerHTML = `
      <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">${purchase.date}</td>
      <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">${purchase.store}</td>
      <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">${purchase.item}</td>
      <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">${purchase.category}</td>
      <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">$${purchase.amount.toFixed(2)}</td>
      <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
      <button class="text-gray-400 hover:text-red-500 transition-colors w-8 h-8 flex items-center justify-center" onclick="deletePurchase(${mockPurchases.indexOf(purchase)})">
      <i class="ri-delete-bin-line"></i>
      </button>
      </td>
      `;
          tableBody.appendChild(row);
        });
      }
      function showConfirmDialog(message, onConfirm) {
        const dialog = document.createElement("div");
        dialog.className =
          "fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50";
        dialog.innerHTML = `
      <div class="bg-white rounded-lg p-6 max-w-sm w-full mx-4">
      <h3 class="text-lg font-medium text-gray-900 mb-4">Confirm Delete</h3>
      <p class="text-gray-600 mb-6">${message}</p>
      <div class="flex justify-end space-x-3">
      <button class="px-4 py-2 text-gray-600 hover:text-gray-900 !rounded-button" onclick="this.closest('.fixed').remove()">Cancel</button>
      <button class="px-4 py-2 bg-red-500 text-white hover:bg-red-600 !rounded-button" id="confirmBtn">Delete</button>
      </div>
      </div>
      `;
        document.body.appendChild(dialog);
        document.getElementById("confirmBtn").addEventListener("click", () => {
          onConfirm();
          dialog.remove();
        });
      }
      function deletePurchase(index) {
        showConfirmDialog("Are you sure you want to delete this purchase?", () => {
          mockPurchases.splice(index, 1);
          updateTable();
          updateDashboard();
          showToast("Purchase deleted successfully!");
        });
      }
      document.getElementById("manualTab").addEventListener("click", () => {
        document.getElementById("manualEntry").classList.remove("hidden");
        document.getElementById("scanReceipt").classList.add("hidden");
        document
          .getElementById("manualTab")
          .classList.add("bg-primary", "text-white");
        document
          .getElementById("manualTab")
          .classList.remove("bg-gray-100", "text-gray-600");
        document
          .getElementById("scanTab")
          .classList.remove("bg-primary", "text-white");
        document
          .getElementById("scanTab")
          .classList.add("bg-gray-100", "text-gray-600");
      });
      document.getElementById("scanTab").addEventListener("click", () => {
        document.getElementById("manualEntry").classList.add("hidden");
        document.getElementById("scanReceipt").classList.remove("hidden");
        document.getElementById("scanTab").classList.add("bg-primary", "text-white");
        document
          .getElementById("scanTab")
          .classList.remove("bg-gray-100", "text-gray-600");
        document
          .getElementById("manualTab")
          .classList.remove("bg-primary", "text-white");
        document
          .getElementById("manualTab")
          .classList.add("bg-gray-100", "text-gray-600");
      });
      document.getElementById("addPurchase").addEventListener("click", () => {
        const itemName = document.getElementById("itemName").value;
        const storeName = document.getElementById("storeName").value;
        const amount = document.getElementById("amount").value;
        const category = document.getElementById("category").value;
        if (!itemName || !storeName || !amount) {
          showToast("Please fill in all required fields");
          return;
        }
        mockPurchases.unshift({
          date: new Date().toISOString().split("T")[0],
          store: storeName,
          item: itemName,
          category: category,
          amount: parseFloat(amount),
        });
        document.getElementById("itemName").value = "";
        document.getElementById("storeName").value = "";
        document.getElementById("amount").value = "";
        updateTable();
        updateDashboard();
        showToast("Purchase added successfully!");
      });
      const monthlyChart = echarts.init(document.getElementById("monthlyChart"));
      const categoryChart = echarts.init(document.getElementById("categoryChart"));
      const monthlyOption = {
        animation: false,
        tooltip: {
          trigger: "axis",
          backgroundColor: "rgba(255, 255, 255, 0.9)",
          textStyle: { color: "#1f2937" },
        },
        xAxis: {
          type: "category",
          data: ["Jan", "Feb", "Mar", "Apr", "May", "Jun"],
          axisLine: { lineStyle: { color: "#1f2937" } },
        },
        yAxis: {
          type: "value",
          axisLine: { lineStyle: { color: "#1f2937" } },
        },
        series: [
          {
            data: [1200, 1400, 1800, 1600, 2200, 2547.63],
            type: "line",
            smooth: true,
            areaStyle: {
              color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [
                {
                  offset: 0,
                  color: "rgba(87, 181, 231, 0.1)",
                },
                {
                  offset: 1,
                  color: "rgba(87, 181, 231, 0)",
                },
              ]),
            },
            lineStyle: { color: "rgba(87, 181, 231, 1)" },
            itemStyle: { color: "rgba(87, 181, 231, 1)" },
            symbol: "none",
          },
        ],
      };
      const categoryOption = {
        animation: false,
        tooltip: {
          trigger: "item",
          backgroundColor: "rgba(255, 255, 255, 0.9)",
          textStyle: { color: "#1f2937" },
        },
        series: [
          {
            type: "pie",
            radius: "70%",
            data: [
              { value: 1200, name: "Groceries" },
              { value: 800, name: "Shopping" },
              { value: 300, name: "Dining" },
              { value: 200, name: "Comfort Purchases" },
              { value: 47.63, name: "Others" },
            ],
            itemStyle: {
              borderRadius: 8,
            },
            color: [
              "rgba(87, 181, 231, 1)",
              "rgba(141, 211, 199, 1)",
              "rgba(251, 191, 114, 1)",
              "rgba(252, 141, 98, 1)",
              "rgba(141, 160, 203, 1)",
            ],
          },
        ],
      };
      monthlyChart.setOption(monthlyOption);
      categoryChart.setOption(categoryOption);
      window.addEventListener("resize", () => {
        monthlyChart.resize();
        categoryChart.resize();
      });
      loadSettings();
      updateTable();
      updateDashboard();
    </script>
  </body>
</html>
